#!/usr/bin/env bash
# Copyright (c) 2020 The Toltec Contributors
# SPDX-License-Identifier: MIT

set -e
source scripts/package-lib

usage="$0 [OPTION]... RECIPESDIR REPODIR

Build the package listing for packages defined in RECIPESDIR.
The resulting listing is written to REPODIR.

Options:

    -h              Show this help message."

helpflag=

while getopts h name; do
    case $name in
        h) helpflag=1 ;;
        *) error "Invalid option. Use the -h flag for more information." ;;
    esac
done

shift $((OPTIND - 1))

if [[ -n $helpflag ]]; then
    echo "$usage"
    exit
fi

if [[ $# -eq 0 ]]; then
    error "Missing RECIPESDIR and REPODIR arguments. Use the -h flag for more information."
fi

if [[ $# -eq 1 ]]; then
    error "Missing REPODIR argument. Use the -h flag for more information."
fi

if [[ $# -gt 2 ]]; then
    error "Extraneous arguments. Use the -h flag for more information."
fi

recipesdir="$1"
repodir="$2"
mkdir -p "$repodir"

indexfile="$repodir/index.html"

cat > "$indexfile" << 'WEBS'
<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>Toltec Package Listing</title>

        <style>
            body {
                font-family: monospace;
                background-color: #f8fcf8;
            }

            .listing {
                width: 100%;
                table-layout: fixed;
            }

            .listing td {
                padding: 0 20px;
            }

            .listing tr:nth-child(even) {
                background-color: #dcdfdc;
            }

            .listing th {
                text-align: left;
                padding-left: 20px;
            }

            .listing-name, .listing-version, .listing-license {
                width: 15%;
            }

            .listing-desc {
                width: 45%;
            }

            .sortable th {
                cursor: pointer;
            }

            .sortable th.sort-asc::after {
                content: " ↓";
            }

            .sortable th.sort-desc::after {
                content: " ↑";
            }
        </style>
    </head>
    <body>
        <a href="../">Back to Repository Home Page</a>
        <h1>Toltec Package Listing</h1>

WEBS

section "Indexing sections"

readarray -t pkgsections < <(
    for recipedir in "$recipesdir"/*; do
        (
            load-recipe-header "$recipedir"
            for pkgname in "${pkgnames[@]}"; do
                (
                    load-recipe-pkg "$pkgname"
                    echo "$section"
                )
            done
        )
    done | sort | uniq
)

for cursection in "${pkgsections[@]}"; do
    section "Making $cursection index"

    cat >> "$indexfile" << WEBS
        <h2>$cursection</h2>

        <table class="listing sortable">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Version</th>
                    <th>License</th>
                </tr>
            </thead>

            <colgroup>
                <col class="listing-name">
                <col class="listing-desc">
                <col class="listing-version">
                <col class="listing-license">
            </colgroup>
WEBS

    for recipedir in "$recipesdir"/*; do
        (
            load-recipe-header "$recipedir"

            for pkgname in "${pkgnames[@]}"; do
                (
                    load-recipe-pkg "$pkgname"

                    if [[ $section = "$cursection" ]]; then
                        pkgid="$(package-id)"

                        status "Adding entry for $pkgid"

                        if [[ -z $url ]]; then
                            href="$url"
                        else
                            href="<a href=\"$url\">$pkgname</a>"
                        fi

                        cat >> "$indexfile" << WEBS
            <tr>
                <td>$href</td>
                <td>$pkgdesc</td>
                <td><a href='./${pkgid}.ipk'>$pkgver</a></td>
                <td><a href='https://spdx.org/licenses/$license.html'>$license</a></td>
            </tr>
WEBS
                    fi
                )
            done
        )
    done

    cat >> "$indexfile" << 'WEBS'
        </table>
WEBS
done

cat >> "$indexfile" << 'WEBS'
        <script>
            const selectCell = (index, row) =>
                row.querySelector(`td:nth-child(${index + 1})`);

            const compareRows = (index, asc, row1, row2) => {
                const direction = asc ? 1 : -1;
                const cell1 = selectCell(index, row1);
                const cell2 = selectCell(index, row2);
                return (direction
                    * (cell1.textContent < cell2.textContent ? -1 : 1));
            };

            const makeSortable = table => {
                const heads = table.querySelectorAll('thead th');
                const body = table.querySelector('tbody');
                const rows = body.querySelectorAll('tr');

                let currentHead = null;
                let currentSortAsc = true;

                const sortBy = (index) => {
                    const head = heads[index];

                    if (currentHead === null || currentHead !== head) {
                        if (currentHead) {
                            currentHead.classList.remove('sort-asc');
                            currentHead.classList.remove('sort-desc');
                        }

                        currentHead = head;
                        currentSortAsc = true;
                        head.classList.add('sort-asc');
                    } else {
                        currentSortAsc = !currentSortAsc;

                        if (currentSortAsc) {
                            head.classList.add('sort-asc');
                            head.classList.remove('sort-desc');
                        } else {
                            head.classList.add('sort-desc');
                            head.classList.remove('sort-asc');
                        }
                    }

                    Array.from(rows)
                        .sort(compareRows.bind(null, index, currentSortAsc))
                        .forEach(row => body.appendChild(row));
                };

                heads.forEach((head, index) => {
                    head.addEventListener('click', () => {
                        sortBy(index);
                    });
                });

                sortBy(0);
            };

            document.querySelectorAll('table.sortable').forEach(makeSortable);
        </script>
    </body>
</html>
WEBS

status "Done. Result is in $indexfile"
