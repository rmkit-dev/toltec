#!/usr/bin/env bash
# Copyright (c) 2020 The Toltec Contributors
# SPDX-License-Identifier: MIT

set -e
source scripts/package-lib

usage="$0 [OPTION]... RECIPESDIR WORKDIR REPODIR [REMOTEREPO]

Build new or updated packages from RECIPESDIR and create a package index.
Packages are built in subdirectories of WORKDIR and resulting artifacts are
gathered in REPODIR.  If REMOTEREPO is omitted,
'https://toltec-dev.org/testing' is used.

Options:

    -h              Show this help message.
    -n              Only build new packages
    -l              Only build packages locally, do not reuse existing packages
                    from the publishing server."

helpflag=
localflag=
onlynew=

while getopts hln name; do
    case $name in
        h) helpflag=1 ;;
        l) localflag=1 ;;
        n) onlynew=1 ;;
        *) error "Invalid option. Use the -h flag for more information." ;;
    esac
done

shift $((OPTIND - 1))

if [[ -n $helpflag ]]; then
    echo "$usage"
    exit
fi

if [[ $# -eq 0 ]]; then
    error "Missing RECIPESDIR, WORKDIR and REPODIR arguments. Use the -h flag for more information."
fi

if [[ $# -eq 1 ]]; then
    error "Missing WORKDIR and REPODIR arguments. Use the -h flag for more information."
fi

if [[ $# -eq 2 ]]; then
    error "Missing REPODIR argument. Use the -h flag for more information."
fi

remoterepo="https://toltec-dev.org/testing"

if [[ $# -eq 4 ]] && [[ -n $4 ]]; then
    remoterepo="$4"
fi

if [[ $# -gt 4 ]]; then
    error "Extraneous arguments. Use the -h flag for more information."
fi

recipesdir="$1"

workdir="$2"
mkdir -p "$workdir"

repodir="$3"
mkdir -p "$repodir"

# Build missing packages or get them from the remote server
# Each recipe is loaded in a subshell to avoid leaking metadata fields
for recipedir in "$recipesdir"/*; do
    (
        readonly recipename="$(basename "$recipedir")"
        load-recipe-header "$recipedir"

        section "Processing $recipename"
        missingpkgs=()

        for pkgname in "${pkgnames[@]}"; do
            if (
                load-recipe-pkg "$pkgname"
                pkgid="$(package-id)"

                # A package is missing if it’s not in the local build folder
                # and, when the -l flag is not set, if it’s not on the
                # remote server either
                [[ ! -f "$repodir/$pkgid.ipk" ]] && {
                    [[ -n $localflag ]] \
                        || ! rsecurl --remote-time \
                            "$remoterepo/$pkgid.ipk" -o "$repodir/$pkgid.ipk" \
                            2> /dev/null
                }
            ); then
                missingpkgs+=("$pkgname")

            else
                (
                    load-recipe-pkg "$pkgname"
                    pkgid="$(package-id)"
                    if [[ -n $onlynew ]]; then
                        rm "$repodir/$pkgid.ipk"
                    fi
                )
            fi
        done

        if [[ ${#missingpkgs[@]} -gt 0 ]]; then
            scripts/package-build "$recipedir" "$workdir/$recipename" "${missingpkgs[@]}"

            for package in "$workdir/$recipename/"*/*.ipk; do
                cp -p "$package" "$repodir"
            done
        fi
    )
done

# Build packages index
section "Making packages index"
"${BASH_SOURCE%/*}"/opkg/opkg-make-index --checksum sha256 -p "$repodir"/Packages "$repodir"

# Set atime and mtime to the date of latest commit for the packages index
lastcommitdate="$(git log -1 --pretty=%ct)"
touch --no-dereference --date="@$lastcommitdate" \
    "$repodir"/Packages \
    "$repodir"/Packages.gz \
    "$repodir"/Packages.stamps

section "Making packages web listing"
scripts/repo-build-web "$recipesdir" "$repodir"

section "Done. Result is in $repodir"
